name: Terraform Apply

on:
  workflow_call:
    inputs:
      project_id:
        description: 'GCP Project ID'
        required: true
        type: string
      service_account:
        description: 'Service account email'
        required: true
        type: string
      workload_identity_provider:
        description: 'Workload Identity Provider'
        required: true
        type: string
      terraform_directory:
        description: 'Directory containing Terraform files'
        required: true
        type: string
      backend_bucket:
        description: 'GCS bucket for Terraform state'
        required: true
        type: string
      backend_prefix:
        description: 'Prefix for Terraform state in GCS'
        required: true
        type: string
      terraform_version:
        description: 'Terraform version to use'
        required: false
        type: string
        default: '1.9.0'
      auto_apply:
        description: 'Automatically apply changes without approval'
        required: false
        type: boolean
        default: false

jobs:
  terraform:
    runs-on: ubuntu-latest
    concurrency:
      group: terraform-${{ inputs.terraform_directory }}
      cancel-in-progress: false

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ inputs.project_id }}
          workload_identity_provider: ${{ inputs.workload_identity_provider }}
          service_account: ${{ inputs.service_account }}
          token_format: 'access_token'
          create_credentials_file: true

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ inputs.project_id }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform Format Check
        id: fmt
        run: |
          cd ${{ inputs.terraform_directory }}
          terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: |
          cd ${{ inputs.terraform_directory }}
          terraform init \
            -backend-config="bucket=${{ inputs.backend_bucket }}" \
            -backend-config="prefix=${{ inputs.backend_prefix }}"

      - name: Terraform Validate
        id: validate
        run: |
          cd ${{ inputs.terraform_directory }}
          terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          cd ${{ inputs.terraform_directory }}
          terraform plan -no-color -detailed-exitcode -out=tfplan || exit_code=$?

          # Exit code 0 = no changes, 1 = error, 2 = changes detected
          if [ "$exit_code" = "1" ]; then
            echo "Terraform plan failed"
            exit 1
          elif [ "$exit_code" = "2" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in plan"
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          fi

      - name: Terraform Apply
        if: (inputs.auto_apply == true && steps.plan.outputs.has_changes == 'true') || github.event_name == 'workflow_dispatch'
        run: |
          cd ${{ inputs.terraform_directory }}
          terraform apply -auto-approve tfplan

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request' && steps.plan.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization \`${{ steps.init.outcome }}\`
            #### Terraform Validation \`${{ steps.validate.outcome }}\`
            #### Terraform Plan \`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Directory: \`${{ inputs.terraform_directory }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
